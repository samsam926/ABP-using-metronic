{"version":3,"file":"ngx-clipboard.umd.js","sources":["../../../projects/ngx-clipboard/src/lib/ngx-clipboard.service.ts","../../../projects/ngx-clipboard/src/lib/ngx-clipboard.directive.ts","../../../projects/ngx-clipboard/src/lib/ngx-clipboard-if-supported.directive.ts","../../../projects/ngx-clipboard/src/lib/ngx-clipboard.module.ts","../../../projects/ngx-clipboard/src/public_api.ts","../../../projects/ngx-clipboard/src/ngx-clipboard.ts"],"sourcesContent":["import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable, NgZone, Optional } from '@angular/core';\nimport { WINDOW } from 'ngx-window-token';\nimport { Observable, Subject } from 'rxjs';\n\nimport { ClipboardParams, IClipboardResponse } from './interface';\n\n/**\n * The following code is heavily copied from https://github.com/zenorocha/clipboard.js\n */\n@Injectable({ providedIn: 'root' })\nexport class ClipboardService {\n    private copySubject = new Subject<IClipboardResponse>();\n    public copyResponse$: Observable<IClipboardResponse> = this.copySubject.asObservable();\n    private tempTextArea: HTMLTextAreaElement | undefined;\n    private config: ClipboardParams = {};\n\n    constructor(\n        private ngZone: NgZone,\n        @Inject(DOCUMENT) public document: any,\n        @Optional() @Inject(WINDOW) private window: any\n    ) {}\n\n    public configure(config: ClipboardParams) {\n        this.config = config;\n    }\n\n    public copy(content: string): void {\n        if (!this.isSupported || !content) {\n            return this.pushCopyResponse({ isSuccess: false, content });\n        }\n        const copyResult = this.copyFromContent(content);\n        if (copyResult) {\n            return this.pushCopyResponse({ content, isSuccess: copyResult });\n        }\n        return this.pushCopyResponse({ isSuccess: false, content });\n    }\n\n    public get isSupported(): boolean {\n        return !!this.document.queryCommandSupported && !!this.document.queryCommandSupported('copy') && !!this.window;\n    }\n\n    public isTargetValid(element: HTMLInputElement | HTMLTextAreaElement): boolean {\n        if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {\n            if (element.hasAttribute('disabled')) {\n                throw new Error('Invalid \"target\" attribute. Please use \"readonly\" instead of \"disabled\" attribute');\n            }\n            return true;\n        }\n        throw new Error('Target should be input or textarea');\n    }\n\n    /**\n     * Attempts to copy from an input `targetElm`\n     */\n    public copyFromInputElement(targetElm: HTMLInputElement | HTMLTextAreaElement, isFocus = true): boolean {\n        try {\n            this.selectTarget(targetElm);\n            const re = this.copyText();\n            this.clearSelection(isFocus ? targetElm : undefined, this.window);\n            return re && this.isCopySuccessInIE11();\n        } catch (error) {\n            return false;\n        }\n    }\n\n    /**\n     * This is a hack for IE11 to return `true` even if copy fails.\n     */\n    public isCopySuccessInIE11(): boolean {\n        const clipboardData = this.window['clipboardData'];\n        if (clipboardData && clipboardData.getData) {\n            if (!clipboardData.getData('Text')) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Creates a fake textarea element, sets its value from `text` property,\n     * and makes a selection on it.\n     */\n    public copyFromContent(content: string, container: HTMLElement = this.document.body): boolean {\n        // check if the temp textarea still belongs to the current container.\n        // In case we have multiple places using ngx-clipboard, one is in a modal using container but the other one is not.\n        if (this.tempTextArea && !container.contains(this.tempTextArea)) {\n            this.destroy(this.tempTextArea.parentElement || undefined);\n        }\n\n        if (!this.tempTextArea) {\n            this.tempTextArea = this.createTempTextArea(this.document, this.window);\n            try {\n                container.appendChild(this.tempTextArea);\n            } catch (error) {\n                throw new Error('Container should be a Dom element');\n            }\n        }\n        this.tempTextArea.value = content;\n\n        const toReturn = this.copyFromInputElement(this.tempTextArea, false);\n        if (this.config.cleanUpAfterCopy) {\n            this.destroy(this.tempTextArea.parentElement || undefined);\n        }\n        return toReturn;\n    }\n\n    /**\n     * Remove temporary textarea if any exists.\n     */\n    public destroy(container: HTMLElement = this.document.body): void {\n        if (this.tempTextArea) {\n            container.removeChild(this.tempTextArea);\n            // removeChild doesn't remove the reference from memory\n            this.tempTextArea = undefined;\n        }\n    }\n\n    /**\n     * Select the target html input element.\n     */\n    private selectTarget(inputElement: HTMLInputElement | HTMLTextAreaElement): number | undefined {\n        inputElement.select();\n        inputElement.setSelectionRange(0, inputElement.value.length);\n        return inputElement.value.length;\n    }\n\n    private copyText(): boolean {\n        return this.document.execCommand('copy');\n    }\n\n    /**\n     * Moves focus away from `target` and back to the trigger, removes current selection.\n     */\n    private clearSelection(inputElement: HTMLInputElement | HTMLTextAreaElement | undefined, window: Window): void {\n        inputElement && inputElement.focus();\n        window.getSelection()?.removeAllRanges();\n    }\n\n    /**\n     * Creates a fake textarea for copy command.\n     */\n    private createTempTextArea(doc: Document, window: Window): HTMLTextAreaElement {\n        const isRTL = doc.documentElement.getAttribute('dir') === 'rtl';\n        let ta: HTMLTextAreaElement;\n        ta = doc.createElement('textarea');\n        // Prevent zooming on iOS\n        ta.style.fontSize = '12pt';\n        // Reset box model\n        ta.style.border = '0';\n        ta.style.padding = '0';\n        ta.style.margin = '0';\n        // Move element out of screen horizontally\n        ta.style.position = 'absolute';\n        ta.style[isRTL ? 'right' : 'left'] = '-9999px';\n        // Move element to the same position vertically\n        const yPosition = window.pageYOffset || doc.documentElement.scrollTop;\n        ta.style.top = yPosition + 'px';\n        ta.setAttribute('readonly', '');\n        return ta;\n    }\n\n    /**\n     * Pushes copy operation response to copySubject, to provide global access\n     * to the response.\n     */\n    public pushCopyResponse(response: IClipboardResponse): void {\n        if (this.copySubject.observers.length > 0) {\n            this.ngZone.run(() => {\n                this.copySubject.next(response);\n            });\n        }\n    }\n\n    /**\n     * @deprecated use pushCopyResponse instead.\n     */\n    public pushCopyReponse(response: IClipboardResponse): void {\n        this.pushCopyResponse(response);\n    }\n}\n","import {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Input,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Output,\n    Renderer2\n} from '@angular/core';\n\nimport { IClipboardResponse } from './interface';\nimport { ClipboardService } from './ngx-clipboard.service';\n\n@Directive({ selector: '[ngxClipboard]' })\nexport class ClipboardDirective implements OnInit, OnDestroy {\n    // https://github.com/maxisam/ngx-clipboard/issues/239#issuecomment-623330624\n    // tslint:disable-next-line:no-input-rename\n    @Input('ngxClipboard')\n    public targetElm: HTMLInputElement | HTMLTextAreaElement | undefined | '';\n    @Input()\n    public container: HTMLElement;\n\n    @Input()\n    public cbContent: string | undefined;\n\n    @Input()\n    public cbSuccessMsg: string;\n\n    @Output()\n    public cbOnSuccess: EventEmitter<IClipboardResponse> = new EventEmitter<IClipboardResponse>();\n\n    @Output()\n    public cbOnError: EventEmitter<any> = new EventEmitter<any>();\n\n    private clickListener: () => void;\n\n    constructor(\n        private ngZone: NgZone,\n        private host: ElementRef<HTMLElement>,\n        private renderer: Renderer2,\n        private clipboardSrv: ClipboardService\n    ) {}\n\n    // tslint:disable-next-line:no-empty\n    public ngOnInit() {\n        this.ngZone.runOutsideAngular(() => {\n            // By default each host listener schedules change detection and also wrapped\n            // into additional function that calls `markForCheck()`. We're listening the `click`\n            // event in the context of the root zone to avoid running unnecessary change detections,\n            // since this directive doesn't do anything template-related (e.g. updates template variables).\n            this.clickListener = this.renderer.listen(this.host.nativeElement, 'click', this.onClick);\n        });\n    }\n\n    public ngOnDestroy() {\n        this.clickListener();\n        this.clipboardSrv.destroy(this.container);\n    }\n\n    private onClick = (event: MouseEvent): void => {\n        if (!this.clipboardSrv.isSupported) {\n            this.handleResult(false, undefined, event);\n        } else if (this.targetElm && this.clipboardSrv.isTargetValid(this.targetElm)) {\n            this.handleResult(this.clipboardSrv.copyFromInputElement(this.targetElm), this.targetElm.value, event);\n        } else if (this.cbContent) {\n            this.handleResult(this.clipboardSrv.copyFromContent(this.cbContent, this.container), this.cbContent, event);\n        }\n    };\n\n    /**\n     * Fires an event based on the copy operation result.\n     * @param succeeded\n     */\n    private handleResult(succeeded: boolean, copiedContent: string | undefined, event: MouseEvent): void {\n        let response: IClipboardResponse = {\n            isSuccess: succeeded,\n            event\n        };\n\n        if (succeeded) {\n            if (this.cbOnSuccess.observers.length > 0) {\n                response = Object.assign(response, {\n                    content: copiedContent,\n                    successMessage: this.cbSuccessMsg\n                });\n                this.ngZone.run(() => {\n                    this.cbOnSuccess.emit(response);\n                });\n            }\n        } else {\n            if (this.cbOnError.observers.length > 0) {\n                this.ngZone.run(() => {\n                    this.cbOnError.emit(response);\n                });\n            }\n        }\n\n        this.clipboardSrv.pushCopyResponse(response);\n    }\n}\n","import { Directive, OnInit, TemplateRef, ViewContainerRef } from '@angular/core';\n\nimport { ClipboardService } from './ngx-clipboard.service';\n\n@Directive({\n    selector: '[ngxClipboardIfSupported]'\n})\nexport class ClipboardIfSupportedDirective implements OnInit {\n    constructor(\n        private _clipboardService: ClipboardService,\n        private _viewContainerRef: ViewContainerRef,\n        private _templateRef: TemplateRef<any>\n    ) {}\n\n    ngOnInit() {\n        if (this._clipboardService.isSupported) {\n            this._viewContainerRef.createEmbeddedView(this._templateRef);\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { ClipboardIfSupportedDirective } from './ngx-clipboard-if-supported.directive';\nimport { ClipboardDirective } from './ngx-clipboard.directive';\n\n@NgModule({\n    imports: [CommonModule],\n    declarations: [ClipboardDirective, ClipboardIfSupportedDirective],\n    exports: [ClipboardDirective, ClipboardIfSupportedDirective]\n})\nexport class ClipboardModule {}\n","/*\n * Public API Surface of ngx-clipboard\n */\n\nexport * from './lib/ngx-clipboard.service';\nexport * from './lib/ngx-clipboard.directive';\nexport * from './lib/ngx-clipboard.module';\nexport * from './lib/ngx-clipboard-if-supported.directive';\nexport * from './lib/interface';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["Subject","Injectable","NgZone","Inject","DOCUMENT","Optional","WINDOW","EventEmitter","Directive","ElementRef","Renderer2","Input","Output","ViewContainerRef","TemplateRef","NgModule","CommonModule"],"mappings":"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"}