{"version":3,"sources":["../../../projects/ngx-clipboard/src/lib/ngx-clipboard.service.ts","../../../projects/ngx-clipboard/src/lib/ngx-clipboard.directive.ts","../../../projects/ngx-clipboard/src/lib/ngx-clipboard-if-supported.directive.ts","../../../projects/ngx-clipboard/src/lib/ngx-clipboard.module.ts"],"names":["ClipboardService","ngZone","document","window","this","copySubject","Subject","copyResponse$","asObservable","config","prototype","configure","copy","content","isSupported","pushCopyResponse","isSuccess","copyResult","copyFromContent","Object","defineProperty","queryCommandSupported","isTargetValid","element","HTMLInputElement","HTMLTextAreaElement","hasAttribute","Error","copyFromInputElement","targetElm","isFocus","selectTarget","re","copyText","clearSelection","undefined","isCopySuccessInIE11","error","clipboardData","getData","container","body","tempTextArea","contains","destroy","parentElement","createTempTextArea","appendChild","value","toReturn","cleanUpAfterCopy","removeChild","inputElement","select","setSelectionRange","length","execCommand","focus","_a","getSelection","removeAllRanges","doc","ta","isRTL","documentElement","getAttribute","createElement","style","fontSize","border","padding","margin","position","yPosition","pageYOffset","scrollTop","top","setAttribute","response","_this","observers","run","next","pushCopyReponse","Injectable","args","providedIn","NgZone","Inject","DOCUMENT","Optional","type","WINDOW","ClipboardDirective","host","renderer","clipboardSrv","cbOnSuccess","EventEmitter","cbOnError","onClick","event","handleResult","cbContent","ngOnInit","runOutsideAngular","clickListener","listen","nativeElement","ngOnDestroy","succeeded","copiedContent","assign","successMessage","cbSuccessMsg","emit","Directive","selector","ElementRef","Renderer2","Input","Output","ClipboardIfSupportedDirective","_clipboardService","_viewContainerRef","_templateRef","createEmbeddedView","ViewContainerRef","TemplateRef","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable, NgZone, Optional } from '@angular/core';\nimport { WINDOW } from 'ngx-window-token';\nimport { Observable, Subject } from 'rxjs';\n\nimport { ClipboardParams, IClipboardResponse } from './interface';\n\n/**\n * The following code is heavily copied from https://github.com/zenorocha/clipboard.js\n */\n@Injectable({ providedIn: 'root' })\nexport class ClipboardService {\n    private copySubject = new Subject<IClipboardResponse>();\n    public copyResponse$: Observable<IClipboardResponse> = this.copySubject.asObservable();\n    private tempTextArea: HTMLTextAreaElement | undefined;\n    private config: ClipboardParams = {};\n\n    constructor(\n        private ngZone: NgZone,\n        @Inject(DOCUMENT) public document: any,\n        @Optional() @Inject(WINDOW) private window: any\n    ) {}\n\n    public configure(config: ClipboardParams) {\n        this.config = config;\n    }\n\n    public copy(content: string): void {\n        if (!this.isSupported || !content) {\n            return this.pushCopyResponse({ isSuccess: false, content });\n        }\n        const copyResult = this.copyFromContent(content);\n        if (copyResult) {\n            return this.pushCopyResponse({ content, isSuccess: copyResult });\n        }\n        return this.pushCopyResponse({ isSuccess: false, content });\n    }\n\n    public get isSupported(): boolean {\n        return !!this.document.queryCommandSupported && !!this.document.queryCommandSupported('copy') && !!this.window;\n    }\n\n    public isTargetValid(element: HTMLInputElement | HTMLTextAreaElement): boolean {\n        if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {\n            if (element.hasAttribute('disabled')) {\n                throw new Error('Invalid \"target\" attribute. Please use \"readonly\" instead of \"disabled\" attribute');\n            }\n            return true;\n        }\n        throw new Error('Target should be input or textarea');\n    }\n\n    /**\n     * Attempts to copy from an input `targetElm`\n     */\n    public copyFromInputElement(targetElm: HTMLInputElement | HTMLTextAreaElement, isFocus = true): boolean {\n        try {\n            this.selectTarget(targetElm);\n            const re = this.copyText();\n            this.clearSelection(isFocus ? targetElm : undefined, this.window);\n            return re && this.isCopySuccessInIE11();\n        } catch (error) {\n            return false;\n        }\n    }\n\n    /**\n     * This is a hack for IE11 to return `true` even if copy fails.\n     */\n    public isCopySuccessInIE11(): boolean {\n        const clipboardData = this.window['clipboardData'];\n        if (clipboardData && clipboardData.getData) {\n            if (!clipboardData.getData('Text')) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Creates a fake textarea element, sets its value from `text` property,\n     * and makes a selection on it.\n     */\n    public copyFromContent(content: string, container: HTMLElement = this.document.body): boolean {\n        // check if the temp textarea still belongs to the current container.\n        // In case we have multiple places using ngx-clipboard, one is in a modal using container but the other one is not.\n        if (this.tempTextArea && !container.contains(this.tempTextArea)) {\n            this.destroy(this.tempTextArea.parentElement || undefined);\n        }\n\n        if (!this.tempTextArea) {\n            this.tempTextArea = this.createTempTextArea(this.document, this.window);\n            try {\n                container.appendChild(this.tempTextArea);\n            } catch (error) {\n                throw new Error('Container should be a Dom element');\n            }\n        }\n        this.tempTextArea.value = content;\n\n        const toReturn = this.copyFromInputElement(this.tempTextArea, false);\n        if (this.config.cleanUpAfterCopy) {\n            this.destroy(this.tempTextArea.parentElement || undefined);\n        }\n        return toReturn;\n    }\n\n    /**\n     * Remove temporary textarea if any exists.\n     */\n    public destroy(container: HTMLElement = this.document.body): void {\n        if (this.tempTextArea) {\n            container.removeChild(this.tempTextArea);\n            // removeChild doesn't remove the reference from memory\n            this.tempTextArea = undefined;\n        }\n    }\n\n    /**\n     * Select the target html input element.\n     */\n    private selectTarget(inputElement: HTMLInputElement | HTMLTextAreaElement): number | undefined {\n        inputElement.select();\n        inputElement.setSelectionRange(0, inputElement.value.length);\n        return inputElement.value.length;\n    }\n\n    private copyText(): boolean {\n        return this.document.execCommand('copy');\n    }\n\n    /**\n     * Moves focus away from `target` and back to the trigger, removes current selection.\n     */\n    private clearSelection(inputElement: HTMLInputElement | HTMLTextAreaElement | undefined, window: Window): void {\n        inputElement && inputElement.focus();\n        window.getSelection()?.removeAllRanges();\n    }\n\n    /**\n     * Creates a fake textarea for copy command.\n     */\n    private createTempTextArea(doc: Document, window: Window): HTMLTextAreaElement {\n        const isRTL = doc.documentElement.getAttribute('dir') === 'rtl';\n        let ta: HTMLTextAreaElement;\n        ta = doc.createElement('textarea');\n        // Prevent zooming on iOS\n        ta.style.fontSize = '12pt';\n        // Reset box model\n        ta.style.border = '0';\n        ta.style.padding = '0';\n        ta.style.margin = '0';\n        // Move element out of screen horizontally\n        ta.style.position = 'absolute';\n        ta.style[isRTL ? 'right' : 'left'] = '-9999px';\n        // Move element to the same position vertically\n        const yPosition = window.pageYOffset || doc.documentElement.scrollTop;\n        ta.style.top = yPosition + 'px';\n        ta.setAttribute('readonly', '');\n        return ta;\n    }\n\n    /**\n     * Pushes copy operation response to copySubject, to provide global access\n     * to the response.\n     */\n    public pushCopyResponse(response: IClipboardResponse): void {\n        if (this.copySubject.observers.length > 0) {\n            this.ngZone.run(() => {\n                this.copySubject.next(response);\n            });\n        }\n    }\n\n    /**\n     * @deprecated use pushCopyResponse instead.\n     */\n    public pushCopyReponse(response: IClipboardResponse): void {\n        this.pushCopyResponse(response);\n    }\n}\n","import {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Input,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Output,\n    Renderer2\n} from '@angular/core';\n\nimport { IClipboardResponse } from './interface';\nimport { ClipboardService } from './ngx-clipboard.service';\n\n@Directive({ selector: '[ngxClipboard]' })\nexport class ClipboardDirective implements OnInit, OnDestroy {\n    // https://github.com/maxisam/ngx-clipboard/issues/239#issuecomment-623330624\n    // tslint:disable-next-line:no-input-rename\n    @Input('ngxClipboard')\n    public targetElm: HTMLInputElement | HTMLTextAreaElement | undefined | '';\n    @Input()\n    public container: HTMLElement;\n\n    @Input()\n    public cbContent: string | undefined;\n\n    @Input()\n    public cbSuccessMsg: string;\n\n    @Output()\n    public cbOnSuccess: EventEmitter<IClipboardResponse> = new EventEmitter<IClipboardResponse>();\n\n    @Output()\n    public cbOnError: EventEmitter<any> = new EventEmitter<any>();\n\n    private clickListener: () => void;\n\n    constructor(\n        private ngZone: NgZone,\n        private host: ElementRef<HTMLElement>,\n        private renderer: Renderer2,\n        private clipboardSrv: ClipboardService\n    ) {}\n\n    // tslint:disable-next-line:no-empty\n    public ngOnInit() {\n        this.ngZone.runOutsideAngular(() => {\n            // By default each host listener schedules change detection and also wrapped\n            // into additional function that calls `markForCheck()`. We're listening the `click`\n            // event in the context of the root zone to avoid running unnecessary change detections,\n            // since this directive doesn't do anything template-related (e.g. updates template variables).\n            this.clickListener = this.renderer.listen(this.host.nativeElement, 'click', this.onClick);\n        });\n    }\n\n    public ngOnDestroy() {\n        this.clickListener();\n        this.clipboardSrv.destroy(this.container);\n    }\n\n    private onClick = (event: MouseEvent): void => {\n        if (!this.clipboardSrv.isSupported) {\n            this.handleResult(false, undefined, event);\n        } else if (this.targetElm && this.clipboardSrv.isTargetValid(this.targetElm)) {\n            this.handleResult(this.clipboardSrv.copyFromInputElement(this.targetElm), this.targetElm.value, event);\n        } else if (this.cbContent) {\n            this.handleResult(this.clipboardSrv.copyFromContent(this.cbContent, this.container), this.cbContent, event);\n        }\n    };\n\n    /**\n     * Fires an event based on the copy operation result.\n     * @param succeeded\n     */\n    private handleResult(succeeded: boolean, copiedContent: string | undefined, event: MouseEvent): void {\n        let response: IClipboardResponse = {\n            isSuccess: succeeded,\n            event\n        };\n\n        if (succeeded) {\n            if (this.cbOnSuccess.observers.length > 0) {\n                response = Object.assign(response, {\n                    content: copiedContent,\n                    successMessage: this.cbSuccessMsg\n                });\n                this.ngZone.run(() => {\n                    this.cbOnSuccess.emit(response);\n                });\n            }\n        } else {\n            if (this.cbOnError.observers.length > 0) {\n                this.ngZone.run(() => {\n                    this.cbOnError.emit(response);\n                });\n            }\n        }\n\n        this.clipboardSrv.pushCopyResponse(response);\n    }\n}\n","import { Directive, OnInit, TemplateRef, ViewContainerRef } from '@angular/core';\n\nimport { ClipboardService } from './ngx-clipboard.service';\n\n@Directive({\n    selector: '[ngxClipboardIfSupported]'\n})\nexport class ClipboardIfSupportedDirective implements OnInit {\n    constructor(\n        private _clipboardService: ClipboardService,\n        private _viewContainerRef: ViewContainerRef,\n        private _templateRef: TemplateRef<any>\n    ) {}\n\n    ngOnInit() {\n        if (this._clipboardService.isSupported) {\n            this._viewContainerRef.createEmbeddedView(this._templateRef);\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { ClipboardIfSupportedDirective } from './ngx-clipboard-if-supported.directive';\nimport { ClipboardDirective } from './ngx-clipboard.directive';\n\n@NgModule({\n    imports: [CommonModule],\n    declarations: [ClipboardDirective, ClipboardIfSupportedDirective],\n    exports: [ClipboardDirective, ClipboardIfSupportedDirective]\n})\nexport class ClipboardModule {}\n"]}